// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProductionManager_EndProject.Data;

namespace ProductionManager_EndProject.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220601010836_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "dfdsf",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "dfd4564sf",
                            Name = "manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "dfdsffds",
                            Name = "worker",
                            NormalizedName = "WORKER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "2",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "4",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ProductionLibrary.Client", b =>
                {
                    b.Property<string>("ClientId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ZIP")
                        .HasColumnType("int");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            ClientId = "Luxus Restaurant",
                            City = "Bruxelles",
                            Country = "Belgium",
                            Email = "LuxusRest@outlook.be",
                            Number = 5,
                            PhoneNumber = "02/458.124",
                            Street = "Food Straat",
                            ZIP = 1000
                        },
                        new
                        {
                            ClientId = "SmartKitchens-Anderlecht",
                            City = "Bruxelles",
                            Country = "Belgium",
                            Email = "SmartKitchens1000@outlook.be",
                            Number = 152,
                            PhoneNumber = "02/358.424",
                            Street = "Food Straat",
                            ZIP = 1000
                        },
                        new
                        {
                            ClientId = "RoyVeggies",
                            City = "Bruxelles",
                            Country = "Belgium",
                            Email = "RoyBalzac@outlook.be",
                            Number = 5,
                            PhoneNumber = "02/124.124",
                            Street = "Butcher's Street",
                            ZIP = 1000
                        });
                });

            modelBuilder.Entity("ProductionLibrary.Lot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("EstimatedQuantitie")
                        .HasColumnType("float");

                    b.Property<bool?>("IsGrowing")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("RecoltedQuantitie")
                        .HasColumnType("float");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UnitType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("RoomId");

                    b.ToTable("Lots");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "DanishTrolley 12, 13, 14",
                            EstimatedQuantitie = 50.0,
                            IsGrowing = true,
                            ProductId = 1,
                            ProductName = "Shitake",
                            RecoltedQuantitie = 28.0,
                            Reference = "SHIe14022022-14026045",
                            RoomId = 1,
                            StartDate = new DateTime(2022, 5, 27, 3, 8, 35, 782, DateTimeKind.Local).AddTicks(3584),
                            UnitType = "Kilogram"
                        },
                        new
                        {
                            Id = 2,
                            Description = "DanishTrolley 15, 16, 17",
                            EstimatedQuantitie = 50.0,
                            IsGrowing = true,
                            ProductId = 1,
                            ProductName = "Shitake",
                            RecoltedQuantitie = 12.58,
                            Reference = "SHIe15022022-17048045",
                            RoomId = 1,
                            StartDate = new DateTime(2022, 6, 1, 3, 8, 35, 782, DateTimeKind.Local).AddTicks(6080),
                            UnitType = "Kilogram"
                        },
                        new
                        {
                            Id = 3,
                            Description = "In the middle of the central column",
                            EstimatedQuantitie = 15.0,
                            IsGrowing = true,
                            ProductId = 2,
                            ProductName = "Maitake",
                            RecoltedQuantitie = 0.0,
                            Reference = "MAIe15022022-17057055",
                            RoomId = 3,
                            StartDate = new DateTime(2022, 6, 1, 3, 8, 35, 782, DateTimeKind.Local).AddTicks(6099),
                            UnitType = "Kilogram"
                        },
                        new
                        {
                            Id = 4,
                            Description = "In the middle of the central column",
                            EstimatedQuantitie = 30.0,
                            IsGrowing = true,
                            ProductId = 4,
                            ProductName = "Amaranth",
                            RecoltedQuantitie = 0.0,
                            Reference = "MAIe21022022-08033014",
                            RoomId = 4,
                            StartDate = new DateTime(2022, 6, 1, 3, 8, 35, 782, DateTimeKind.Local).AddTicks(6104),
                            UnitType = "Unit"
                        },
                        new
                        {
                            Id = 5,
                            Description = "In the middle of the central column",
                            EstimatedQuantitie = 50.0,
                            IsGrowing = true,
                            ProductId = 5,
                            ProductName = "Black Mustard",
                            RecoltedQuantitie = 0.0,
                            Reference = "BLAm22022022-14034012",
                            RoomId = 5,
                            StartDate = new DateTime(2022, 6, 1, 3, 8, 35, 782, DateTimeKind.Local).AddTicks(6109),
                            UnitType = "Unit"
                        },
                        new
                        {
                            Id = 6,
                            Description = "In the middle of the central column",
                            EstimatedQuantitie = 80.0,
                            IsGrowing = true,
                            ProductId = 6,
                            ProductName = "Sunflower",
                            RecoltedQuantitie = 0.0,
                            Reference = "SUNr25022022-18020005",
                            RoomId = 6,
                            StartDate = new DateTime(2022, 6, 1, 3, 8, 35, 782, DateTimeKind.Local).AddTicks(6114),
                            UnitType = "Unit"
                        });
                });

            modelBuilder.Entity("ProductionLibrary.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price")
                        .HasMaxLength(6)
                        .HasColumnType("float");

                    b.Property<string>("Reference")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ProductionLibrary.ProdTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProdTaskStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductionId")
                        .HasColumnType("int");

                    b.Property<string>("TaskDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ProdTaskStatusId");

                    b.HasIndex("ProductionId");

                    b.ToTable("ProdTasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProdTaskStatusId = 1,
                            ProductionId = 1,
                            TaskDescription = "- Recolt Shitake in growing room 1 and clean old substracts",
                            TaskName = "Recolt"
                        },
                        new
                        {
                            Id = 2,
                            ProdTaskStatusId = 1,
                            ProductionId = 1,
                            TaskDescription = "- Recolt Maitake in growing room 3 and clean old substracts",
                            TaskName = "Recolt"
                        },
                        new
                        {
                            Id = 3,
                            ProdTaskStatusId = 1,
                            ProductionId = 1,
                            TaskDescription = "- Check if we have substracts ready to go into the growing rooms",
                            TaskName = "Grow"
                        },
                        new
                        {
                            Id = 4,
                            ProdTaskStatusId = 1,
                            ProductionId = 1,
                            TaskDescription = "- Big Cleaning of growing room 2",
                            TaskName = "Clean"
                        });
                });

            modelBuilder.Entity("ProductionLibrary.ProdTaskStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ProdTaskStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StatusName = "New"
                        },
                        new
                        {
                            Id = 2,
                            StatusName = "Assigned"
                        },
                        new
                        {
                            Id = 3,
                            StatusName = "Closed"
                        });
                });

            modelBuilder.Entity("ProductionLibrary.ProdTaskUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProdTaskId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProdTaskId");

                    b.HasIndex("UserId");

                    b.ToTable("ProdTasksUsers");
                });

            modelBuilder.Entity("ProductionLibrary.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("NotOrderedStock")
                        .HasColumnType("float");

                    b.Property<double?>("OrderedStock")
                        .HasColumnType("float");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("PriceFor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("RealStock")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NotOrderedStock = 0.0,
                            OrderedStock = 0.0,
                            Price = 18.0,
                            PriceFor = "Kilogram",
                            ProductName = "Shitake",
                            RealStock = 40.579999999999998
                        },
                        new
                        {
                            Id = 2,
                            NotOrderedStock = 0.0,
                            OrderedStock = 0.0,
                            Price = 26.5,
                            PriceFor = "Kilogram",
                            ProductName = "Maitake",
                            RealStock = 0.0
                        },
                        new
                        {
                            Id = 3,
                            NotOrderedStock = 0.0,
                            OrderedStock = 0.0,
                            Price = 20.0,
                            PriceFor = "Kilogram",
                            ProductName = "Nameko",
                            RealStock = 0.0
                        },
                        new
                        {
                            Id = 4,
                            NotOrderedStock = 0.0,
                            OrderedStock = 0.0,
                            Price = 10.0,
                            PriceFor = "Unit",
                            ProductName = "Amaranth",
                            RealStock = 0.0
                        },
                        new
                        {
                            Id = 5,
                            NotOrderedStock = 0.0,
                            OrderedStock = 0.0,
                            Price = 6.5,
                            PriceFor = "Unit",
                            ProductName = "Black Mustard",
                            RealStock = 0.0
                        },
                        new
                        {
                            Id = 6,
                            NotOrderedStock = 0.0,
                            OrderedStock = 0.0,
                            Price = 5.2000000000000002,
                            PriceFor = "Unit",
                            ProductName = "Sunflower",
                            RealStock = 0.0
                        });
                });

            modelBuilder.Entity("ProductionLibrary.ProductOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductOrders");
                });

            modelBuilder.Entity("ProductionLibrary.Production", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ZIP")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductionName")
                        .IsUnique();

                    b.ToTable("Productions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Bruxelles",
                            Country = "Belgium",
                            Email = "SmartFood@smartfood.com",
                            Number = 10,
                            PhoneNumber = "02/153.154",
                            ProductionName = "SmartFood",
                            Street = "High Street",
                            ZIP = 1000
                        },
                        new
                        {
                            Id = 2,
                            City = "Bruxelles",
                            Country = "Belgium",
                            Email = "SmartFoodGreen@smartfood.com",
                            Number = 10,
                            PhoneNumber = "02/153.154",
                            ProductionName = "SmartFoodGreens",
                            Street = "High Street",
                            ZIP = 1000
                        },
                        new
                        {
                            Id = 3,
                            City = "Bruxelles",
                            Country = "Belgium",
                            Email = "SmartFoodSpace@smartfood.com",
                            Number = 10,
                            PhoneNumber = "02/153.154",
                            ProductionName = "SmartFoodSpace-Brusels",
                            Street = "High Street",
                            ZIP = 1000
                        });
                });

            modelBuilder.Entity("ProductionLibrary.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductionId")
                        .HasColumnType("int");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ProductionId");

                    b.HasIndex("RoomName")
                        .IsUnique();

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProductionId = 1,
                            RoomName = "Growing Room 1"
                        },
                        new
                        {
                            Id = 2,
                            ProductionId = 1,
                            RoomName = "Growing Room 2"
                        },
                        new
                        {
                            Id = 3,
                            ProductionId = 1,
                            RoomName = "Growing Room 3"
                        },
                        new
                        {
                            Id = 4,
                            ProductionId = 2,
                            RoomName = "MicroGreen Room 1"
                        },
                        new
                        {
                            Id = 5,
                            ProductionId = 2,
                            RoomName = "MicroGreen Room 2"
                        },
                        new
                        {
                            Id = 6,
                            ProductionId = 2,
                            RoomName = "MicroGreen Room 3"
                        });
                });

            modelBuilder.Entity("ProductionLibrary.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDay")
                        .HasMaxLength(50)
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("ZIP")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(2022, 6, 1, 3, 8, 35, 776, DateTimeKind.Local).AddTicks(8674),
                            City = "Bruxelles",
                            ConcurrencyStamp = "f1dea21f-79d3-4f42-8934-aff1b5fdac2e",
                            Country = "Belgium",
                            Email = "max@intec.be",
                            EmailConfirmed = true,
                            FirstName = "Maximilian",
                            LastName = "Poniatowski",
                            LockoutEnabled = false,
                            NormalizedEmail = "MAX@INTEC.BE",
                            NormalizedUserName = "MAX",
                            Number = 5,
                            PasswordHash = "AQAAAAEAACcQAAAAENcfhOix6dZlNmzoJXdzh+ME3CDBWry8Knrt98yHKxmabyL9AE919xKsTAWVIHp26A==",
                            PhoneNumber = "02/789.321",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3b3215bb-d5a7-4c9e-92ae-f7880e36fe36",
                            Street = "Nieuwe Straat",
                            TwoFactorEnabled = false,
                            UserName = "max",
                            ZIP = 1000
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(2022, 6, 1, 3, 8, 35, 781, DateTimeKind.Local).AddTicks(4268),
                            City = "Bruxelles",
                            ConcurrencyStamp = "0804f8ae-f938-4cba-b490-2aa18b55ebfa",
                            Country = "Belgium",
                            Email = "admin@intec.be",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "The first one",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@INTEC.BE",
                            NormalizedUserName = "ADMIN",
                            Number = 5,
                            PasswordHash = "AQAAAAEAACcQAAAAENcfhOix6dZlNmzoJXdzh+ME3CDBWry8Knrt98yHKxmabyL9AE919xKsTAWVIHp26A==",
                            PhoneNumber = "02/189.181",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "283ffb98-47b8-4a52-b5c7-56e80f0b6ce5",
                            Street = "Nieuwe Straat",
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            ZIP = 1000
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(2022, 6, 1, 3, 8, 35, 781, DateTimeKind.Local).AddTicks(4330),
                            City = "Bruxelles",
                            ConcurrencyStamp = "4e9d2dcc-5e15-4b2a-8350-69e6cce68a2b",
                            Country = "Belgium",
                            Email = "worker@intec.be",
                            EmailConfirmed = true,
                            FirstName = "Worker",
                            LastName = "The first one",
                            LockoutEnabled = false,
                            NormalizedEmail = "WORKER@INTEC.BE",
                            NormalizedUserName = "WORKER",
                            Number = 5,
                            PasswordHash = "AQAAAAEAACcQAAAAENcfhOix6dZlNmzoJXdzh+ME3CDBWry8Knrt98yHKxmabyL9AE919xKsTAWVIHp26A==",
                            PhoneNumber = "02/189.181",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d9d296a9-b697-40f0-adde-6fa0a1b15e35",
                            Street = "Nieuwe Straat",
                            TwoFactorEnabled = false,
                            UserName = "worker",
                            ZIP = 1000
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(2022, 6, 1, 3, 8, 35, 781, DateTimeKind.Local).AddTicks(4345),
                            City = "Bruxelles",
                            ConcurrencyStamp = "6f02c956-a23d-453b-b306-b327c5f71603",
                            Country = "Belgium",
                            Email = "worker@intec.be",
                            EmailConfirmed = true,
                            FirstName = "Manager",
                            LastName = "The first one",
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER@INTEC.BE",
                            NormalizedUserName = "MANAGER",
                            Number = 5,
                            PasswordHash = "AQAAAAEAACcQAAAAENcfhOix6dZlNmzoJXdzh+ME3CDBWry8Knrt98yHKxmabyL9AE919xKsTAWVIHp26A==",
                            PhoneNumber = "02/189.181",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b82f2136-fde6-4dca-a61b-18fafdcd5637",
                            Street = "Nieuwe Straat",
                            TwoFactorEnabled = false,
                            UserName = "manager",
                            ZIP = 1000
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ProductionLibrary.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ProductionLibrary.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductionLibrary.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ProductionLibrary.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductionLibrary.Lot", b =>
                {
                    b.HasOne("ProductionLibrary.Product", "Product")
                        .WithMany("Lots")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductionLibrary.Room", "Room")
                        .WithMany("Lots")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("ProductionLibrary.Order", b =>
                {
                    b.HasOne("ProductionLibrary.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId");

                    b.HasOne("ProductionLibrary.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProductionLibrary.ProdTask", b =>
                {
                    b.HasOne("ProductionLibrary.ProdTaskStatus", "ProdTaskStatus")
                        .WithMany()
                        .HasForeignKey("ProdTaskStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductionLibrary.Production", "Production")
                        .WithMany("ProdTasks")
                        .HasForeignKey("ProductionId");

                    b.Navigation("ProdTaskStatus");

                    b.Navigation("Production");
                });

            modelBuilder.Entity("ProductionLibrary.ProdTaskUser", b =>
                {
                    b.HasOne("ProductionLibrary.ProdTask", "ProdTask")
                        .WithMany("ProdTaskUsers")
                        .HasForeignKey("ProdTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductionLibrary.User", "User")
                        .WithMany("ProdTaskUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProdTask");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProductionLibrary.ProductOrder", b =>
                {
                    b.HasOne("ProductionLibrary.Order", "Order")
                        .WithMany("ProductOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductionLibrary.Product", "Product")
                        .WithMany("ProductOrders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductionLibrary.Room", b =>
                {
                    b.HasOne("ProductionLibrary.Production", "Production")
                        .WithMany("Rooms")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Production");
                });

            modelBuilder.Entity("ProductionLibrary.Client", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ProductionLibrary.Order", b =>
                {
                    b.Navigation("ProductOrders");
                });

            modelBuilder.Entity("ProductionLibrary.ProdTask", b =>
                {
                    b.Navigation("ProdTaskUsers");
                });

            modelBuilder.Entity("ProductionLibrary.Product", b =>
                {
                    b.Navigation("Lots");

                    b.Navigation("ProductOrders");
                });

            modelBuilder.Entity("ProductionLibrary.Production", b =>
                {
                    b.Navigation("ProdTasks");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("ProductionLibrary.Room", b =>
                {
                    b.Navigation("Lots");
                });

            modelBuilder.Entity("ProductionLibrary.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ProdTaskUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
